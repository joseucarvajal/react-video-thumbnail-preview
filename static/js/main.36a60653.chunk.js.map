{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","file","setFile","videoInput","useRef","videoElem","imgSrc","setImgSrc","style","padding","ref","accept","onChange","current","files","type","width","display","src","URL","createObjectURL","autoPlay","onLoadedData","canvas","document","createElement","videoWidth","height","videoHeight","getContext","drawImage","toDataURL","fetch","then","res","blob","File","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qNAUe,SAASA,IAAO,IAAD,EACJC,qBADI,mBACrBC,EADqB,KACfC,EADe,KAEtBC,EAAaC,iBAAyB,MACtCC,EAAYD,iBAAyB,MAHf,EAIAJ,mBAAiB,IAJjB,mBAIrBM,EAJqB,KAIbC,EAJa,KA6C5B,OACE,sBACEC,MAAO,CACLC,QAAS,QAFb,UAKE,uBACEC,IAAKP,EACLQ,OAAO,gCACPC,SAhDqB,WACrBT,EAAWU,SAGXV,EAAWU,QAAQC,OAGvBZ,EAAQC,EAAWU,QAAQC,MAAM,KA0C7BC,KAAK,SAGNd,EACC,uBACEO,MAAO,CAAEQ,MAAO,QAASC,QAAS,QAClCP,IAAKL,EACLa,IAAKC,IAAIC,gBAAgBnB,GAGzBoB,UAAQ,EACRC,aAlDiB,WACvB,GAAIjB,EAAUQ,QAAd,CAIA,IAAMU,EAASC,SAASC,cAAc,UACtCF,EAAOP,MAAQX,EAAUQ,QAAQa,WACjCH,EAAOI,OAAStB,EAAUQ,QAAQe,YAElCL,EACGM,WAAW,MACXC,UACCzB,EAAUQ,QACV,EACA,EACAR,EAAUQ,QAAQa,WAClBrB,EAAUQ,QAAQe,aAGtBrB,EAAUgB,EAAOQ,aACjBC,MAAM1B,GACH2B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACW,IAAIC,KAAK,CAACD,GAAO,kBAAmB,CAClDpB,KAAM,qBA8BR,GAGDT,EACC,8BACE,qBAAKE,MAAO,CAAEQ,MAAO,SAAWE,IAAKZ,EAAQ+B,IAAI,OAGnD,MCtFR,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjD,EAAD,MAEFyB,SAASyB,eAAe,SAM1BX,K","file":"static/js/main.36a60653.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n// Source: https://codesandbox.io/s/pz7s1?file=/src/getThumbnail.js\n// Deploy to GitHub pages: https://www.freecodecamp.org/news/deploy-a-react-app-to-github-pages/\n// import Thumbnail from \"./Thumbnail\";\n// 1. Make sure user is uploading a video\n// This is already checked in the Illfact videoupload\n\n// 2. Do some testing before implementing it.\n// 3. You have to get the file URL with the Form Apped\n\nexport default function App() {\n  const [file, setFile] = useState<File>()\n  const videoInput = useRef<HTMLInputElement>(null)\n  const videoElem = useRef<HTMLVideoElement>(null)\n  const [imgSrc, setImgSrc] = useState<string>('')\n\n  const videoChangeHandler = () => {\n    if(!videoInput.current){\n      return;\n    }\n    if(!videoInput.current.files){\n      return;\n    }\n    setFile(videoInput.current.files[0])\n  }\n\n  const captureThumbnail = () => {\n    if(!videoElem.current){\n      return;\n    }\n\n    const canvas = document.createElement('canvas')\n    canvas.width = videoElem.current.videoWidth\n    canvas.height = videoElem.current.videoHeight\n\n    canvas\n      .getContext('2d')!\n      .drawImage(\n        videoElem.current,\n        0,\n        0,\n        videoElem.current.videoWidth,\n        videoElem.current.videoHeight,\n      )\n\n    setImgSrc(canvas.toDataURL())\n    fetch(imgSrc)\n      .then((res) => res.blob())\n      .then((blob) => {\n        const NewFile = new File([blob], 'video_thumbnail', {\n          type: 'image/png',\n        })\n      })\n  }\n\n  return (\n    <div\n      style={{\n        padding: '20px',\n      }}\n    >\n      <input\n        ref={videoInput}\n        accept=\"video/mp4,video/x-m4v,video/*\"\n        onChange={videoChangeHandler}\n        type=\"file\"\n      />\n\n      {file ? (\n        <video\n          style={{ width: '100px', display: 'none' }}\n          ref={videoElem}\n          src={URL.createObjectURL(file)}\n          //type=\"video/mp4\"\n          // controls\n          autoPlay\n          onLoadedData={captureThumbnail}\n          \n        ></video>\n      ) : (\n        ''\n      )}\n\n      {imgSrc ? (\n        <div>\n          <img style={{ width: '100px' }} src={imgSrc} alt=\"\" />\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}